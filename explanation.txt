/*For testing purposes we created a profiler procedure*/
  PROCEDURE profiler AS
    timestart NUMBER;
    BEGIN        

    dbms_output.disable();
    
    timestart := dbms_utility.get_time();
  
    conciliate_all_statements();
    
    dbms_output.enable();
  
    dbms_output.put_line('profile: ' || to_char(dbms_utility.get_time() - timestart) || 'cs');
    
  END profiler;

  /*In order to be executed we must export it on CONCILIAtE_PKG*/
  PROCEDURE profiler;


/*
1. Se descubrio que el procedure no podia correr debido a diversos problemas los cuales se corrigen a continuacion: 

SQL utilizado para averiguar el nombre de los archivos que se debian modificar:

select file_name,tablespace_name,bytes/1024,AUTOEXTENSIBLE,status from dba_data_files where TABLESPACE_NAME = 'SPACE' order by tablespace_name;

Table spaces modificados:

TEAM2_DATA
TEAM2_INDEXES */

alter database datafile '/dbases/oracle11g/u01/app/oracle/product/11.2.0/db_1/dbs/team2_data.ora' AUTOEXTEND ON;
alter database datafile '/dbases/oracle11g/u01/app/oracle/product/11.2.0/db_1/dbs/team2_indexes.ora' AUTOEXTEND ON;

/*
	Existe la posibilidad de que se generen excepciones, por lo que se agregaron try catch para atrapar las mismas.
  Esta modificacion se debe realizar en conciliate_statement (para evitar que la excepcion suba hacia arriba).
*/

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('No data was found.');

/* Como nos tiraba error de overflow desactivamos lo siguiente */
dbms_output.disable();

--This enables the output printing and we need a huge buffer size for it to work
dbms_output.enable(buffer_size);



-------------------------  OPTIMIZACIÓN --------------------

/* La optimización se puede realizar  a partir de la creación de índices, la eliminación de aquellos que no sean utilizados, etc. Para eso se analizan las queries con statements delete, update o select y se verifica
la coherencia del código de la base de datos. */

/* Considerar que índices existentes se van a modificar indicando UNIQUE para la precisión en la predicción
del plan a utilizar */

## CREACIÓN DE ÍNDICES A PARTIR DEL ANÁLISIS DE STATEMENTS

## Select Statements

## 1)

	SELECT distinct hs.statement_locator
	FROM hotel_statement hs
	WHERE LTRIM(RTRIM(hs.STATUS)) = 'PENDING'

/* La query no va a poder ser optimizada dando que gran parte de las hotel_statement se van a encontrar en 'PENDING' e indexar
por este campo generaría un TABLE_ACCESS_FULL de todas formas */

## 2)

	SELECT /*+SUPPLIER_PK*/ s.CONCILIATION_TOLERANCE_PERC, s.CONCILIATION_TOLERANCE_MAX
	FROM supplier s
	WHERE s.ID = R.SUPPLIER_ID;

/* La query no puede ser optimizada ya que ya hay un índice existente sobre ID de supplier. El índice
se debe modificar para que sea UNIQUE como corresponde. */

## 3)

	SELECT /*+HOTEL_STATEMENT_PK*/ hs.ID, hs.SUPPLIER_ID, hs.RECORD_LOCATOR, hs.AMOUNT, hs.CURRENCY
	FROM hotel_statement hs
	WHERE hs.statement_locator = pStatementLocator
	AND LTRIM(RTRIM(hs.STATUS)) = 'PENDING';

/* Primero el uso de HOTEL_STATEMENT_PK no va a impactar en la performance de la query dado que la misma es sobre
el id de la tabla y no se filtra por el mismo en la consulta por lo que el plan va a ser TABLE_ACCESS_FULL. Para
evitar un acceso completo se creó un índice sobre (STATEMENT_LOCATOR, STATUS) el cuál no es UNIQUE debido a la lógica
de negocio del problema. Como no es UNIQUE se obtiene un INDEX_RANGE_SCAN como parte del plan. */

## 4)

      select /*+HASH*/ po.ID, po.TOTAL_COST, po.TOTAL_COST_CURRENCY, po.STATUS, po.CHECKIN, po.CHECKOUT
      into vPoId, vAmount, vCurrency, vStatus, vCheckinDate, vCheckoutDate
      from PAYMENT_ORDER po, SUPPLIER s
      where po.supplier_id = pSupplier
      and po.supplier_id = s.id
      and lower(po.record_locator) = lower(pRecordLocator)
      and rtrim(ltrim(po.status)) = 'PENDING';

/* Se propone el uso de un HASH JOIN cuando en realidad se podrían utilizar índices para realizar la operación.
Por este motivo se soluciona a partir de NESTED_LOOPS utilizando el índice ya creado SUPPLIER_PK y además se va a crear un nuevo índice sobre (SUPPLIER_ID, RECORD_LOCATOR, STATUS)
el cuál no va a ser UNIQUE por la lógica del negocio. Como resultado el plan va a contar con NESTED_LOOPS
 + INDEX UNIQUE SCAN (SUPPLIER_PK) + INDEX RANGE SCAN (nuevo índice). */

## Nuevos índices para planes de menor costo

CREATE INDEX "BDII_TEAM2"."PAYMENT_ORDER_TR" ON "BDII_TEAM2"."PAYMENT_ORDER" ("SUPPLIER_ID", "RECORD_LOCATOR", "STATUS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 10240 NEXT 55296 MINEXTENTS 1 MAXEXTENTS 121
  PCTINCREASE 50 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TEAM2_INDEXES";
  
CREATE INDEX "BDII_TEAM2"."HOTEL_STATEMENT_DB" ON "BDII_TEAM2"."HOTEL_STATEMENT" ("STATEMENT_LOCATOR", "STATUS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 10240 NEXT 55296 MINEXTENTS 1 MAXEXTENTS 121
  PCTINCREASE 50 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TEAM2_INDEXES";

## Update Statements

/* Por suerte, todos los UPDATES se realizan sobre la condición de algun ID de alguna tabla y ya contamos con
índices sobre cada ID de cada tabla existente. Lo único que habría que modificar es que los índices sean UNIQUE
por la lógica de negocio y para que indique como plan un INDEX_UNIQUE_SCAN en vez de INDEX_RANGE_SCAN.

## Delete Statements

/* No se cuenta con ninguna sentencia de este tipo */


## ELIMINACIÓN DE ÍNDICES A PARTIR DEL ANÁLISIS DE STATEMENTS

/* Todos los índices "PK" (sobre ID) de las tablas HOTEL_STATEMENT, PAYMENT_ORDER y SUPPLIER son necesarios
dado que se usan en todos los UPDATE y en algunos SELECT dependiendo del caso, por lo tanto no se eliminará
ninguna de estas. */

/* La tabla CONCILIATION cuenta con una gran cantidad de índices cuando en la misma no se va a realizar ningún
UPDATE, ni DELETE ni SELECT. Esto genera mucho overhead en la operación de INSERT sobre la tabla la cuál es fundamental
dado las características del negocio y desperdicia espacio en disco. Por este motivo se procede a eliminar los índices de la tabla */

DROP INDEX "CONCILIATION_PK";

DROP INDEX "CONC_DATES_IDX";

DROP INDEX "CONC_HOTEL_STATEMENT_IDX";

DROP INDEX "CONC_PAYMENT_ORDER_IDX";

DROP INDEX "CONC_STATEMENT_LOCATOR_IDX";

DROP INDEX "CONC_STATUS_IDX";

## MODIFICACIÓN DE TABLAS

/* Se agrega la Constraint "Primary Key" sobre los ID de las tablas SUPPLIER, HOTEL_STATEMENT y PAYMENT_ORDER para representar la lógica de negocio y para generar índices UNIQUE ya que los índices existentes no lo son. Esto garantiza que al realizar una busqueda se retorne el primer valor debido a que no hay dos valores iguales (pues son unique). Recordar que la creación de una primary key sobre un atributo genera un índice sobre el mismo.

DROP INDEX "HOTEL_STATEMENT_PK";

DROP INDEX "PAYMENT_ORDER_PK";

DROP INDEX "SUPPLIER_PK";

ALTER TABLE "BDII_TEAM2"."HOTEL_STATEMENT" ADD CONSTRAINT "HOTEL_STATEMENT_PK" PRIMARY KEY ("ID") using index TABLESPACE "TEAM2_INDEXES";

ALTER TABLE "BDII_TEAM2"."SUPPLIER" ADD CONSTRAINT "SUPPLIER_PK" PRIMARY KEY ("ID") using index TABLESPACE "TEAM2_INDEXES";

ALTER TABLE "BDII_TEAM2"."PAYMENT_ORDER" ADD CONSTRAINT "PAYMENT_ORDER_PK" PRIMARY KEY ("ID") using index TABLESPACE "TEAM2_INDEXES";


/* Se modifican los valores de PCTFREE y PCTUSED de la tabla CONCILIATION ya que 80 como PCTFREE es un valor
  extremadamente alto y desperdiciaría mucho espacio en disco. También se modifico su PCTINCREASE de 5 a 50
  dado que es probable que esta tabla requiera de mucho espacio en disco y si el PCTINCREASE es bajo entonces va a aumentar considerablemente la cantidad de syscalls a relizar para la alocación de nuevos extents. 
  Se modifico el tamaño de STATUS de 1000 a 20. */

CREATE TABLE "BDII_TEAM2"."CONCILIATION" 
   (  "ID" NUMBER(10,0), 
  "HOTEL_STATEMENT_ID" NUMBER(10,0), 
  "STATEMENT_LOCATOR" CHAR(20 BYTE), 
  "PAYMENT_ORDER_ID" NUMBER(10,0), 
  "CONCILIATED_AMOUNT" NUMBER(10,2), 
  "CONCILIATED_AMOUNT_CURRENCY" CHAR(3 BYTE), 
  "ADJUSTMENT_AMOUNT" NUMBER(10,2), 
  "ADJUSTMENT_AMOUNT_CURRENCY" CHAR(3 BYTE), 
  "STATUS" CHAR(1000 BYTE), 
  "CREATED" TIMESTAMP (6), 
  "MODIFIED" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 10240 NEXT 10240 MINEXTENTS 1 MAXEXTENTS 121
  PCTINCREASE 5 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TEAM2_DATA" ;


/* Se modifico el campo NEXT de la tabla HOTEL_STATEMENT dado que el valor 126976 es muy grande para esta tabla y generaría un desperdicio del espacio en disco */

CREATE TABLE "BDII_TEAM2"."HOTEL_STATEMENT" 
   (  "ID" NUMBER(10,0), 
  "RECORD_LOCATOR" CHAR(6 BYTE), 
  "SUPPLIER_ID" NUMBER(10,0), 
  "AMOUNT" NUMBER(10,2), 
  "CURRENCY" CHAR(3 BYTE), 
  "STATEMENT_LOCATOR" CHAR(20 BYTE), 
  "STATUS" CHAR(20 BYTE), 
  "CREATED" TIMESTAMP (6), 
  "MODIFIED" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 10240 NEXT 126976 MINEXTENTS 1 MAXEXTENTS 121
  PCTINCREASE 50 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TEAM2_DATA" ;

/* Análogo al anterior, se modifico next de PAYMENT_ORDER */

  CREATE TABLE "BDII_TEAM2"."PAYMENT_ORDER" 
   (  "ID" NUMBER(10,0), 
  "RECORD_LOCATOR" CHAR(6 BYTE), 
  "SUPPLIER_ID" NUMBER(10,0), 
  "TOTAL_AMOUNT" NUMBER(10,2), 
  "TOTAL_AMOUNT_CURRENCY" CHAR(3 BYTE), 
  "TOTAL_COST" NUMBER(10,2), 
  "TOTAL_COST_CURRENCY" CHAR(3 BYTE), 
  "STATUS" CHAR(20 BYTE), 
  "CHECKIN" DATE, 
  "CHECKOUT" DATE, 
  "CREATED" TIMESTAMP (6), 
  "MODIFIED" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 10240 NEXT 286720 MINEXTENTS 1 MAXEXTENTS 121
  PCTINCREASE 50 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TEAM2_DATA" ;

/* Análogo al anterior se modifico NEXT de SUPPLIER */

    CREATE TABLE "BDII_TEAM2"."SUPPLIER" 
   (  "ID" NUMBER(10,0), 
  "LEGAL_NAME" VARCHAR2(100 BYTE), 
  "TAX_PAYER_ID" VARCHAR2(20 BYTE), 
  "COUNTRY" CHAR(2 BYTE), 
  "CONCILIATION_CRITERIA" CHAR(10 BYTE), 
  "CONCILIATION_TOLERANCE_PERC" NUMBER(10,2), 
  "CONCILIATION_TOLERANCE_MAX" NUMBER(10,2), 
  "STATUS" CHAR(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 10240 NEXT 83968 MINEXTENTS 1 MAXEXTENTS 121
  PCTINCREASE 50 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TEAM2_DATA" ;

  ## MODIFICACIÓN DE SECUENCIAS

  /* Se removieron tres secuencias HOTEL_STATEMENT_SEQ, PAYMENT_ORDER_SEQ y SUPPLIER_SEQ dado que las mismas
  no van a ser utilizadas. Se modifico la sequencia CONCILIATION_SEQ indicando NOMAXVALUE en vez de indicar 9999999999999999999999999999 como valor máximo dado que el valor máximo actual es de 28 dígitos, el cuál corresponde al valor previo indicado pero si en un futuro ese valor fuese a cambiar por una menor cantidad es straightforward indicar NOMAXVALUE que configura el máximo como el valor más grande posible.

  CREATE SEQUENCE  "BDII_TEAM2"."CONCILIATION_SEQ"  MINVALUE 1 NOMAXVALUE INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;


/*Se agrego un script para correr drop, create y el script con una sola linea. La forma para ejecutarlo es:
@path_to_script/run.sql
Luego ejecutar el script, corre automaticamente el profiler para determinar cuanto tiempo tarda en ejecutarse el procedure, pero el mismo
por motivos desconocidos si es invocado por linea de comandos no printea el resultado a pantalla, solo se nos informa que el mismo se
ejecuto correctamente. Si alguien lo puede arreglar seria muy copado.

*/